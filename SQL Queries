--QUESTION ONE 
-- The question requires the number of individual users registered on Wave, and this suggests the SELECT COUNT syntax

SELECT COUNT(u_id) AS wave_users FROM users; 


 

--QUESTION TWO
-- Similar to Q1 this question demands for a total numbers or counts of a field, in this case, a specific value in the field send_amount_currency which is CFA.

SELECT COUNT(transfers_id) AS cfa_transfers FROM transfers
WHERE send_amount_currency='CFA';

 

--QUESTION THREE
--To ascertain the different users who have sent have sent transfer in CFA, basically, they should should have unique value, and which then becomes the primary key, in this instance, 
--the 'u_id' becomes the primary key.
--To be able to pinpoint the different users who use CFA, set them apart from other users.

SELECT COUNT(DISTINCT u_id) AS cfa_user_transfers FROM transfers
WHERE send_amount_currency = 'CFA';

 

--QUESTION FOUR
--Count all transactions from January to December in 2018. To get this, the transactions of each agent across the months will have to be made known.
--We will need the agent transaction ID, atx_id from the aget transactions table and the respective timeframe (from the when_created column) within
--which the transactions where completed.

SELECT TO_CHAR(TO_DATE (EXTRACT(MONTH FROM when_created)::text, 'MM'), 'Month') AS transaction_month,
COUNT(atx_id) AS num_of_agents FROM agent_transactions
WHERE EXTRACT(YEAR FROM when_created)=2018
GROUP BY EXTRACT(MONTH FROM when_created);

 
--QUESTION FIVE
--First we set a condition to remove 0 amount values by referencing transactions within the past week 
--from rows that are greater or less than 0.
--Then we find the sum of their transaction amounts to determine the net withdrawers and depositors and 
--group them by positive and negative values.
--The case is used to assign the number of transactions to their respective values 
--(net withdrawers/net depositors).

SELECT 
CASE WHEN net_value > 0 THEN 'NET WITHDRAWERS'
ELSE 'NET DEPOSITORS'
END, 
COUNT(agent_id) AS net_count FROM (SELECT agent_id, sum(amount) AS net_value FROM agent_transactions
WHERE ((amount < 0) OR (amount > 0)) AND (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER)                                 
GROUP BY agent_id 
ORDER BY agent_id ASC) AS abc
GROUP BY (net_value > 0);
    
--QUESTION SIX
--First we set a condition to show only rows that have data from the previous week.
--Then we join the agents and agent_tansactions tables based on the same agent id (agent_id)
--Finally we create a view(virtual table) to show us the number of transactions in each city.

CREATE VIEW atx_volume_city_summary AS
SELECT agents.city AS city, COUNT(agent_transactions.atx_id) AS trans_volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER) 
GROUP BY agents.city

 

--QUESTION SEVEN
--First we set a condition to show only rows that have data from the previous week.
--Then we join the agents and agent_tansactions tables based on the same agent id (agent_id).
--Finally we create a view(virtual table) to show us the number of transactions in each country
--and group them by the country first then the city.

CREATE VIEW atx_volume_city_summary_by_country AS
SELECT agents.country AS country, agents.city AS city, COUNT(agent_transactions.atx_id) AS Volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER) 
GROUP BY agents.country, agents.city

 

--QUESTION EIGHT
--First we set a condition to show only rows that have data from the previous week.
--Then we join the transfers and wallets tables based on the same wallet id (wallet_id)
--Finally we create a view(virtual table) to show us the country, transfer kind and the volume of 
--transfers grouped by the country and kind of transaction.

CREATE VIEW send_volume_by_country_and_kind AS
SELECT wallets.ledger_location AS country, transfers.kind AS transfer_kind, 
SUM(transfers.send_amount_scalar) AS volume 
FROM transfers 
INNER JOIN wallets 
ON transfers.source_wallet_id = wallets.wallet_id
WHERE (transfers.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER)                                       
GROUP BY wallets.ledger_location, transfers.kind;

 

--QUESTION NINE
--First we set a condition to show only rows that have data from the previous week.
--Then we join the transfers and wallets tables based on the same wallet id (wallet_id)
--Finally we create a view(virtual table) to show us the country, transfer kind, the volume of transfers,
-- number of transactions, and the unique number of senders grouped by the country and kind of transaction.

CREATE OR REPLACE VIEW send_volume_by_country_and_kind AS
SELECT transfers.kind AS transfer_kind, wallets.ledger_location AS country, 
SUM(transfers.send_amount_scalar) AS volume, COUNT(transfers.send_amount_scalar) AS trans_count,
COUNT(DISTINCT transfers.source_wallet_id) AS unique_senders
FROM transfers 
INNER JOIN wallets 
ON transfers.source_wallet_id = wallets.wallet_id
WHERE transfers.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
    AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER                                   
GROUP BY wallets.ledger_location, transfers.kind;



--QUESTION TEN
--First we set a condition to show transactions done in CFA that were above 10,000,000 in the last month.
--Then we show the wallet id (source_wallet_id) and the amount they sent (send_amount_scalar)
SELECT source_wallet_id, send_amount_scalar
FROM transfers
WHERE (send_amount_currency ='CFA')
AND (send_amount_scalar > 10000000)
AND (EXTRACT(MONTH FROM when_created) = EXTRACT(MONTH FROM NOW()) - 1)
